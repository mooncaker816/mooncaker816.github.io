<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Go patterns on Mooncaker816</title>
    <link>https://mooncaker816.github.io/tags/go-patterns/</link>
    <description>Recent content in Go patterns on Mooncaker816</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <copyright>&amp;copy; 2018-Present</copyright>
    <lastBuildDate>Wed, 13 Jun 2018 15:02:12 +0800</lastBuildDate>
    
	<atom:link href="https://mooncaker816.github.io/tags/go-patterns/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Go并发模式1</title>
      <link>https://mooncaker816.github.io/2018/06/13/go%E5%B9%B6%E5%8F%91%E6%A8%A1%E5%BC%8F1/</link>
      <pubDate>Wed, 13 Jun 2018 15:02:12 +0800</pubDate>
      
      <guid>https://mooncaker816.github.io/2018/06/13/go%E5%B9%B6%E5%8F%91%E6%A8%A1%E5%BC%8F1/</guid>
      <description>Or-Channel 使用场景： 当你需要同时监测多个信号时，只要接收到其中任一个信号，就认为信号接收成功，需要进行下一步处理 代码： func or(channels ...&amp;lt;-chan interface{}) &amp;lt;-chan interface{} { switch len(channels) { case 0: return nil case</description>
    </item>
    
  </channel>
</rss>